[project]
name = "mypackage"
version = "0.0.1"
requires-python = ">=3.9"

[build-system]
build-backend = "setuptools.build_meta"
#build-backend = 'mesonpy'
requires = [
    "meson-python>=0.15.0",

    "meson-python>=0.15.0",
    "Cython>=3.0.8",  # when updating version, also update check in meson.build
    "pybind11>=2.10.4",
    "pythran>=0.14.0",

    # When numpy 2.0.0rc1 comes out, we should update this to build against 2.0,
    # and then runtime depend on the range 1.22.X to <2.3. No need to switch to
    # 1.25.2 in the meantime (1.25.x is the first version which exports older C
    # API versions by default).

    # default numpy requirements
    "numpy==1.22.4; python_version<='3.10' and platform_python_implementation != 'PyPy'",
    "numpy==1.23.2; python_version=='3.11' and platform_python_implementation != 'PyPy'",
    "numpy>=1.26.0,<1.27; python_version=='3.12'",

    # PyPy requirements; 1.25.0 was the first version to have pypy-3.9 wheels,
    # and 1.25.0 also changed the C API target to 1.19.x, so no longer a need
    # for an exact pin.
    "numpy>=1.25.0; python_version>='3.9' and platform_python_implementation=='PyPy'",

    # For Python versions which aren't yet officially supported, we specify an
    # unpinned NumPy which allows source distributions to be used and allows
    # wheels to be used as soon as they become available.
    # Python 3.13 has known issues that are only fixed in numpy 2.0.0.dev0
    "numpy>=2.0.0.dev0; python_version>='3.13'",
]

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages]
find = {}  # Scan the project directory with the default parameters

[project.scripts]
cli-name = "mypackage:main"
